/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import database.DataAccessObject;
import gerenciarhorarios.Disciplina;
import gerenciarhorarios.Professor;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Rodrigo
 */
public class EditarDisciplina extends javax.swing.JInternalFrame {

    ArrayList<Professor> professores = null;

    ArrayList<Disciplina> disciplinas = null; //Lista das disciplinas do banco de dados.
    Disciplina disciplina = null; //Disciplina selecionada.

    /**
     * Creates new form EditarDisciplina
     */
    public EditarDisciplina() {
        initComponents();

        DataAccessObject.abrirConexao();
        professores = DataAccessObject.getProfessores();
        disciplinas = DataAccessObject.getDisciplinas();

        for (int i = 0; i < disciplinas.size(); i++) {
            jComboBoxDisciplina.addItem(disciplinas.get(i).getNome() + " (Professor(a): "
                    + DataAccessObject.getProfessorByID(disciplinas.get(i).getIdProfessor()).getNome() + ")"
                    + " - " + disciplinas.get(i).getQtdAulasSemanais() + " aulas semanais");
        }

        DataAccessObject.fecharConexao();

        //Adiciona o nome dos professores ao jComboBox.
        for (int i = 0; i < professores.size(); i++) {
            jComboBoxProfessorDisciplina.addItem(professores.get(i).getNome());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNomeDisciplina = new javax.swing.JLabel();
        jTextFieldNomeDisciplina = new javax.swing.JTextField();
        jLabelQtdAulasSemanais = new javax.swing.JLabel();
        jTextFieldQtdAulasSemanais = new javax.swing.JTextField();
        jLabelProfessorDisciplina = new javax.swing.JLabel();
        jComboBoxProfessorDisciplina = new javax.swing.JComboBox<>();
        jButtonConfirmar = new javax.swing.JButton();
        jLabelDisciplina = new javax.swing.JLabel();
        jComboBoxDisciplina = new javax.swing.JComboBox<>();
        jButtonSelecionar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Editar disciplina");

        jLabelNomeDisciplina.setText("Nome da disciplina");

        jTextFieldNomeDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeDisciplinaActionPerformed(evt);
            }
        });
        jTextFieldNomeDisciplina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeDisciplinaKeyPressed(evt);
            }
        });

        jLabelQtdAulasSemanais.setText("Quantidade de aulas semanais");

        jTextFieldQtdAulasSemanais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldQtdAulasSemanaisKeyPressed(evt);
            }
        });

        jLabelProfessorDisciplina.setText("Professor da disciplina");

        jComboBoxProfessorDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProfessorDisciplinaActionPerformed(evt);
            }
        });
        jComboBoxProfessorDisciplina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxProfessorDisciplinaKeyPressed(evt);
            }
        });

        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        jLabelDisciplina.setText("Disciplina");

        jButtonSelecionar.setText("Selecionar");
        jButtonSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonConfirmar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelQtdAulasSemanais)
                            .addComponent(jLabelNomeDisciplina)
                            .addComponent(jLabelProfessorDisciplina)
                            .addComponent(jLabelDisciplina))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxDisciplina, 0, 409, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSelecionar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNomeDisciplina)
                                    .addComponent(jTextFieldQtdAulasSemanais)
                                    .addComponent(jComboBoxProfessorDisciplina, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDisciplina)
                    .addComponent(jComboBoxDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelecionar))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomeDisciplina))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldQtdAulasSemanais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelQtdAulasSemanais))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProfessorDisciplina)
                    .addComponent(jComboBoxProfessorDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonConfirmar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNomeDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeDisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeDisciplinaActionPerformed

    private void jTextFieldNomeDisciplinaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeDisciplinaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { //Se pressionar enter.
            if (disciplina == null) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione uma disciplina primeiro.",
                        "Nenhuma disciplina selecionada", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                    || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
                if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                    JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                    return;
                }
                if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) {
                //Verificar se o campo qtd aulas semanais possui apenas números.
                if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                            + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
            int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
            int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.

            //Atualizar os dados da disciplina.
            disciplina.setNome(nomeDisciplina);
            disciplina.setQtdAulasSemanais(cargaHorariaDisciplina);
            disciplina.setIdProfessor(professores.get(posProfessor).getID());

            DataAccessObject.abrirConexao();
            DataAccessObject.update(disciplina); //Insere a disciplina no banco de dados.

            //Atualizar a caixa de disciplinas para corresponder ao novo nome e ao novo
            //professor.
            disciplinas = DataAccessObject.getDisciplinas();
            jComboBoxDisciplina.removeAllItems();

            for (int i = 0; i < disciplinas.size(); i++) {
                jComboBoxDisciplina.addItem(disciplinas.get(i).getNome() + " (Professor(a): "
                        + DataAccessObject.getProfessorByID(disciplinas.get(i).getIdProfessor()).getNome() + ")");
            }

            DataAccessObject.fecharConexao();

            JOptionPane.showMessageDialog(null, "Disciplina atualizada com sucesso!");
            jTextFieldNomeDisciplina.setText("");
            jTextFieldQtdAulasSemanais.setText("");

            jTextFieldNomeDisciplina.requestFocus();
            
            disciplina = null;
        }
    }//GEN-LAST:event_jTextFieldNomeDisciplinaKeyPressed

    private void jTextFieldQtdAulasSemanaisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQtdAulasSemanaisKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { //Se pressionar enter.
            if (disciplina == null) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione uma disciplina primeiro.",
                        "Nenhuma disciplina selecionada", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                    || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
                if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                    JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                    return;
                }
                if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) {
                //Verificar se o campo qtd aulas semanais possui apenas números.
                if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                            + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
            int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
            int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.

            //Atualizar os dados da disciplina.
            disciplina.setNome(nomeDisciplina);
            disciplina.setQtdAulasSemanais(cargaHorariaDisciplina);
            disciplina.setIdProfessor(professores.get(posProfessor).getID());

            DataAccessObject.abrirConexao();
            DataAccessObject.update(disciplina); //Insere a disciplina no banco de dados.

            //Atualizar a caixa de disciplinas para corresponder ao novo nome e ao novo
            //professor.
            disciplinas = DataAccessObject.getDisciplinas();
            jComboBoxDisciplina.removeAllItems();

            for (int i = 0; i < disciplinas.size(); i++) {
                jComboBoxDisciplina.addItem(disciplinas.get(i).getNome() + " (Professor(a): "
                        + DataAccessObject.getProfessorByID(disciplinas.get(i).getIdProfessor()).getNome() + ")");
            }

            DataAccessObject.fecharConexao();

            JOptionPane.showMessageDialog(null, "Disciplina atualizada com sucesso!");
            jTextFieldNomeDisciplina.setText("");
            jTextFieldQtdAulasSemanais.setText("");

            jTextFieldNomeDisciplina.requestFocus();
            
            disciplina = null;
        }
    }//GEN-LAST:event_jTextFieldQtdAulasSemanaisKeyPressed

    private void jComboBoxProfessorDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProfessorDisciplinaActionPerformed

    }//GEN-LAST:event_jComboBoxProfessorDisciplinaActionPerformed

    private void jComboBoxProfessorDisciplinaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxProfessorDisciplinaKeyPressed

    }//GEN-LAST:event_jComboBoxProfessorDisciplinaKeyPressed

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        if (disciplina == null) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione uma disciplina primeiro.",
                    "Nenhuma disciplina selecionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                        + "vazio", JOptionPane.ERROR_MESSAGE);
                jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                return;
            }
            if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                        + "vazio", JOptionPane.ERROR_MESSAGE);
                jTextFieldQtdAulasSemanais.requestFocus();
                return;
            }
        }

        for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) {
            //Verificar se o campo qtd aulas semanais possui apenas números.
            if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                        + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                jTextFieldQtdAulasSemanais.requestFocus();
                return;
            }
        }

        String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
        int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
        int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.

        //Atualizar os dados da disciplina.
        disciplina.setNome(nomeDisciplina);
        disciplina.setQtdAulasSemanais(cargaHorariaDisciplina);
        disciplina.setIdProfessor(professores.get(posProfessor).getID());

        DataAccessObject.abrirConexao();
        DataAccessObject.update(disciplina); //Insere a disciplina no banco de dados.

        //Atualizar a caixa de disciplinas para corresponder ao novo nome e ao novo
        //professor.
        disciplinas = DataAccessObject.getDisciplinas();
        jComboBoxDisciplina.removeAllItems();

        for (int i = 0; i < disciplinas.size(); i++) {
            jComboBoxDisciplina.addItem(disciplinas.get(i).getNome() + " (Professor(a): "
                    + DataAccessObject.getProfessorByID(disciplinas.get(i).getIdProfessor()).getNome() + ")");
        }

        DataAccessObject.fecharConexao();

        JOptionPane.showMessageDialog(null, "Disciplina atualizada com sucesso!");
        jTextFieldNomeDisciplina.setText("");
        jTextFieldQtdAulasSemanais.setText("");

        jTextFieldNomeDisciplina.requestFocus();
        
        disciplina = null;
    }//GEN-LAST:event_jButtonConfirmarActionPerformed

    private void jButtonSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarActionPerformed
        disciplina = disciplinas.get(jComboBoxDisciplina.getSelectedIndex());

        //Definir os valores dos campos de acordo com os dados da disciplina.
        jTextFieldNomeDisciplina.setText(disciplina.getNome());
        jTextFieldQtdAulasSemanais.setText(String.valueOf(disciplina.getQtdAulasSemanais()));
        DataAccessObject.abrirConexao();
        jComboBoxProfessorDisciplina.setSelectedItem(DataAccessObject.
                getProfessorByID(disciplina.getIdProfessor()).getNome());
        DataAccessObject.fecharConexao();
    }//GEN-LAST:event_jButtonSelecionarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JButton jButtonSelecionar;
    private javax.swing.JComboBox<String> jComboBoxDisciplina;
    private javax.swing.JComboBox<String> jComboBoxProfessorDisciplina;
    private javax.swing.JLabel jLabelDisciplina;
    private javax.swing.JLabel jLabelNomeDisciplina;
    private javax.swing.JLabel jLabelProfessorDisciplina;
    private javax.swing.JLabel jLabelQtdAulasSemanais;
    private javax.swing.JTextField jTextFieldNomeDisciplina;
    private javax.swing.JTextField jTextFieldQtdAulasSemanais;
    // End of variables declaration//GEN-END:variables
}
