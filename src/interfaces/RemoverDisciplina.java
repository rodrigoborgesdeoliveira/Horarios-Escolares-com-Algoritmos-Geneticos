/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import database.DataAccessObject;
import gerenciarhorarios.Aula;
import gerenciarhorarios.Disciplina;
import gerenciarhorarios.Professor;
import gerenciarhorarios.Turma;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Rodrigo
 */
public class RemoverDisciplina extends javax.swing.JInternalFrame {

    ArrayList<Disciplina> disciplinas = null; //Lista das disciplinas do banco de dados.
    Disciplina disciplina = null; //Disciplina selecionada.

    /**
     * Creates new form RemoverDisciplina
     */
    public RemoverDisciplina() {
        initComponents();

        DataAccessObject.abrirConexao();
        disciplinas = DataAccessObject.getDisciplinas();

        for (int i = 0; i < disciplinas.size(); i++) {
            jComboBoxDisciplinas.addItem(disciplinas.get(i).getNome() + " (Professor(a): "
                    + DataAccessObject.getProfessorByID(disciplinas.get(i).getIdProfessor()).getNome() + ")");
        }

        DataAccessObject.fecharConexao();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelDisciplina = new javax.swing.JLabel();
        jComboBoxDisciplinas = new javax.swing.JComboBox<>();
        jButtonConfirmar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Remover disciplina");

        jLabelDisciplina.setText("Disciplina");

        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 408, Short.MAX_VALUE)
                        .addComponent(jButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelDisciplina)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxDisciplinas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDisciplina)
                    .addComponent(jComboBoxDisciplinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        DataAccessObject.abrirConexao();

        disciplina = disciplinas.get(jComboBoxDisciplinas.getSelectedIndex());

        ArrayList<Aula> aulas = DataAccessObject.getAulasByIDDisciplina(disciplina.getID()); //Aulas com essa disciplina.
        
        //Selecionar as turmas das aulas e atualizar as restrições dos professores.
        for (int i = 0; i < aulas.size(); i++) {
            Turma turma = DataAccessObject.getTurmaByID(aulas.get(i).getIDTurma());

            //Se já tiver cadastrado um horário da turma antes, remover e editar as
            //restrições dos professores.
            if (DataAccessObject.turmaTemHorario(turma.getID())) {
                //Antes de remover, dizer que os professores possuem disponibilidade
                //nesses horários. 
                int turmaAcrescimo; //Acréscimo para definir as restrições de acordo com o turno.
                switch (turma.getTurno()) {
                    case "Matutino":
                        turmaAcrescimo = 0;
                        break;
                    case "Vespertino":
                        turmaAcrescimo = 36;
                        break;
                    default:
                        //Noturno.
                        turmaAcrescimo = 72;
                        break;
                }
                
                int[] horario = DataAccessObject.getHorarioTurma(turma.getID()).getHorarioTurma();
                for (int j = 0; j < horario.length; j++) {
                    if (horario[j] == disciplina.getID()) {
                        //Se a aula for relacionada à disciplina a ser removida, editar restrição do professor.
                        Professor professor = DataAccessObject.getProfessorByID(disciplina.getIdProfessor());

                        char[] restricoes = professor.getRestricoes();
                        restricoes[j + turmaAcrescimo] = '0'; //Disponibilidade de horário.
                        professor.setRestricoes(restricoes);
                        
                        DataAccessObject.update(professor);
                    }
                }
            }
        }
        
        //Marcar como aula vaga onde essa disciplina estiver em horários de turmas.
        DataAccessObject.removeIDDisciplinaFromHorario(disciplina.getID());

        //Remover aulas relacionadas a essa disciplina.
        DataAccessObject.removeAulaByIDDisciplina(disciplina.getID());

        //Remover disciplina da tabela disciplina.
        DataAccessObject.remove(disciplina);

        JOptionPane.showMessageDialog(null, "Disciplina removida com sucesso!");
        disciplinas.remove(jComboBoxDisciplinas.getSelectedIndex());
        jComboBoxDisciplinas.removeItemAt(jComboBoxDisciplinas.getSelectedIndex());

        DataAccessObject.fecharConexao();
    }//GEN-LAST:event_jButtonConfirmarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JComboBox<String> jComboBoxDisciplinas;
    private javax.swing.JLabel jLabelDisciplina;
    // End of variables declaration//GEN-END:variables
}
