/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import database.DataAccessObject;
import gerenciarhorarios.Disciplina;
import gerenciarhorarios.Professor;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Rodrigo
 */
public class CadastrarDisciplina extends javax.swing.JInternalFrame {

    ArrayList<Professor> professores = null;

    /**
     * Creates new form CadastrarDisciplina
     */
    public CadastrarDisciplina() {
        initComponents();

        DataAccessObject.abrirConexao();
        professores = DataAccessObject.getProfessores();
        DataAccessObject.fecharConexao();

        //Adiciona o nome dos professores ao jComboBox.
        for (int i = 0; i < professores.size(); i++) {
            jComboBoxProfessorDisciplina.addItem(professores.get(i).getNome());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldNomeDisciplina = new javax.swing.JTextField();
        jLabelNomeDisciplina = new javax.swing.JLabel();
        jTextFieldQtdAulasSemanais = new javax.swing.JTextField();
        jLabelQtdAulasSemanais = new javax.swing.JLabel();
        jLabelProfessorDisciplina = new javax.swing.JLabel();
        jComboBoxProfessorDisciplina = new javax.swing.JComboBox<>();
        jButtonConfirmar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastrar disciplina");

        jTextFieldNomeDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeDisciplinaActionPerformed(evt);
            }
        });
        jTextFieldNomeDisciplina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeDisciplinaKeyPressed(evt);
            }
        });

        jLabelNomeDisciplina.setText("Nome da disciplina");

        jTextFieldQtdAulasSemanais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldQtdAulasSemanaisKeyPressed(evt);
            }
        });

        jLabelQtdAulasSemanais.setText("Quantidade de aulas semanais");

        jLabelProfessorDisciplina.setText("Professor da disciplina");

        jComboBoxProfessorDisciplina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProfessorDisciplinaActionPerformed(evt);
            }
        });
        jComboBoxProfessorDisciplina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxProfessorDisciplinaKeyPressed(evt);
            }
        });

        jButtonConfirmar.setText("Confirmar");
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelQtdAulasSemanais)
                    .addComponent(jLabelNomeDisciplina, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelProfessorDisciplina, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldNomeDisciplina)
                    .addComponent(jTextFieldQtdAulasSemanais)
                    .addComponent(jComboBoxProfessorDisciplina, 0, 429, Short.MAX_VALUE))
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNomeDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomeDisciplina))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldQtdAulasSemanais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelQtdAulasSemanais))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProfessorDisciplina)
                    .addComponent(jComboBoxProfessorDisciplina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonConfirmar)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNomeDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeDisciplinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeDisciplinaActionPerformed

    private void jComboBoxProfessorDisciplinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProfessorDisciplinaActionPerformed

    }//GEN-LAST:event_jComboBoxProfessorDisciplinaActionPerformed

    private void jTextFieldNomeDisciplinaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeDisciplinaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { //Se pressionar enter.
            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                    || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
                if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                    JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                    return;
                }
                if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) { //Verificar se o campo qtd aulas semanais possui apenas números.
                if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                            + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
            int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
            int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.
            Disciplina disciplina = new Disciplina(nomeDisciplina, cargaHorariaDisciplina, professores.get(posProfessor).getID());

            DataAccessObject.abrirConexao();
            if (DataAccessObject.disciplinaExiste(disciplina)) {
                //A disciplina já existe. Não cadastrar a disciplina.
                JOptionPane.showMessageDialog(null, "A disciplina informada já existe para os valores"
                        + " informados", "Disciplina já existe", JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataAccessObject.insert(disciplina); //Insere a disciplina no banco de dados.
            DataAccessObject.fecharConexao();

            JOptionPane.showMessageDialog(null, "Disciplina cadastrada com sucesso!");
            jTextFieldNomeDisciplina.setText("");
            jTextFieldQtdAulasSemanais.setText("");

            jTextFieldNomeDisciplina.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldNomeDisciplinaKeyPressed

    private void jTextFieldQtdAulasSemanaisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldQtdAulasSemanaisKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { //Se pressionar enter.
            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                    || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
                if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                    JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                    return;
                }
                if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                            + "vazio", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) { //Verificar se o campo qtd aulas semanais possui apenas números.
                if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                    JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                            + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                    jTextFieldQtdAulasSemanais.requestFocus();
                    return;
                }
            }

            String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
            int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
            int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.
            Disciplina disciplina = new Disciplina(nomeDisciplina, cargaHorariaDisciplina, professores.get(posProfessor).getID());

            DataAccessObject.abrirConexao();
            if (DataAccessObject.disciplinaExiste(disciplina)) {
                //A disciplina já existe. Não cadastrar a disciplina.
                JOptionPane.showMessageDialog(null, "A disciplina informada já existe para os valores"
                        + " informados", "Disciplina já existe", JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataAccessObject.insert(disciplina); //Insere a disciplina no banco de dados.
            DataAccessObject.fecharConexao();

            JOptionPane.showMessageDialog(null, "Disciplina cadastrada com sucesso!");
            jTextFieldNomeDisciplina.setText("");
            jTextFieldQtdAulasSemanais.setText("");

            jTextFieldNomeDisciplina.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldQtdAulasSemanaisKeyPressed

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        if (jTextFieldNomeDisciplina.getText().trim().isEmpty()
                || jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) {
            if (jTextFieldNomeDisciplina.getText().trim().isEmpty()) { //Se campo nome da disciplina for vazio.
                JOptionPane.showMessageDialog(null, "O campo nome da disciplina não pode ser vazio.", "Campo "
                        + "vazio", JOptionPane.ERROR_MESSAGE);
                jTextFieldNomeDisciplina.requestFocus(); //Focar no campo.
                return;
            }
            if (jTextFieldQtdAulasSemanais.getText().trim().isEmpty()) { //Se campo quantidade de aulas semanais for vazio.
                JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais não pode ser vazio.", "Campo "
                        + "vazio", JOptionPane.ERROR_MESSAGE);
                jTextFieldQtdAulasSemanais.requestFocus();
                return;
            }
        }

        for (int i = 0; i < jTextFieldQtdAulasSemanais.getText().trim().length(); i++) { //Verificar se o campo qtd aulas semanais possui apenas números.
            if (!Character.isDigit(jTextFieldQtdAulasSemanais.getText().trim().charAt(i))) {
                JOptionPane.showMessageDialog(null, "O campo quantidade de aulas semanais deve possuir "
                        + "apenas números", "Caractere inválido", JOptionPane.ERROR_MESSAGE);
                jTextFieldQtdAulasSemanais.requestFocus();
                return;
            }
        }

        String nomeDisciplina = jTextFieldNomeDisciplina.getText().trim().replaceAll("\\s+", " ");
        int cargaHorariaDisciplina = Integer.parseInt(jTextFieldQtdAulasSemanais.getText().trim());
        int posProfessor = jComboBoxProfessorDisciplina.getSelectedIndex(); //Posição do professor no ArrayList.
        Disciplina disciplina = new Disciplina(nomeDisciplina, cargaHorariaDisciplina, professores.get(posProfessor).getID());

        DataAccessObject.abrirConexao();
        if (DataAccessObject.disciplinaExiste(disciplina)) {
            //A disciplina já existe. Não cadastrar a disciplina.
            JOptionPane.showMessageDialog(null, "A disciplina informada já existe para os valores"
                    + " informados", "Disciplina já existe", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DataAccessObject.insert(disciplina); //Insere a disciplina no banco de dados.
        DataAccessObject.fecharConexao();

        JOptionPane.showMessageDialog(null, "Disciplina cadastrada com sucesso!");
        jTextFieldNomeDisciplina.setText("");
        jTextFieldQtdAulasSemanais.setText("");

        jTextFieldNomeDisciplina.requestFocus();
    }//GEN-LAST:event_jButtonConfirmarActionPerformed

    private void jComboBoxProfessorDisciplinaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxProfessorDisciplinaKeyPressed

    }//GEN-LAST:event_jComboBoxProfessorDisciplinaKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JComboBox<String> jComboBoxProfessorDisciplina;
    private javax.swing.JLabel jLabelNomeDisciplina;
    private javax.swing.JLabel jLabelProfessorDisciplina;
    private javax.swing.JLabel jLabelQtdAulasSemanais;
    private javax.swing.JTextField jTextFieldNomeDisciplina;
    private javax.swing.JTextField jTextFieldQtdAulasSemanais;
    // End of variables declaration//GEN-END:variables
}
